components:
  schemas:
    Category:
      properties:
        categoryId:
          type: string
        categoryName:
          type: string
      type: object
    Exercise:
      properties:
        description:
          type: string
        equipmentNeeded:
          type: string
        exerciseId:
          type: string
        name:
          type: string
        targetMuscleGroup:
          type: string
        videoId:
          type: string
      type: object
    FoodItem:
      properties:
        calories:
          type: integer
        carbohydrates:
          type: integer
        fats:
          type: integer
        foodItemId:
          type: string
        name:
          type: string
        protein:
          type: integer
      type: object
    Meal:
      properties:
        foodItemId:
          type: string
        mealId:
          type: string
        planId:
          type: string
        portionSize:
          type: integer
      type: object
    NutritionPlan:
      properties:
        date:
          format: date
          type: string
        mealId:
          type: string
        planId:
          type: string
        userId:
          type: string
      type: object
    Profile:
      properties:
        age:
          type: integer
        bmi:
          type: number
        fitnessGoal:
          type: string
        height:
          type: number
        profileId:
          type: string
        userId:
          type: string
        weight:
          type: number
      type: object
    ProgressRecord:
      properties:
        caloriesBurned:
          type: number
        caloriesIntake:
          type: number
        date:
          format: date
          type: string
        recordId:
          type: string
        userId:
          type: string
        weight:
          type: number
        workoutPerformed:
          type: string
      type: object
    ProgressReport:
      properties:
        BMIChange:
          type: integer
        caloriesBurnedChange:
          type: integer
        caloriesIntakeChange:
          type: integer
        endDate:
          format: date-time
          type: string
        reportId:
          type: string
        startDate:
          format: date-time
          type: string
        userId:
          type: string
        weightChange:
          type: integer
      type: object
    User:
      properties:
        age:
          type: integer
        bmi:
          type: number
        email:
          type: string
        fitnessGoal:
          type: string
        gender:
          type: string
        height:
          type: number
        name:
          type: string
        password:
          type: string
        userId:
          type: string
        weight:
          type: number
      type: object
    UserGroup:
      properties:
        groupGoal:
          type: string
        groupId:
          type: string
        groupName:
          type: string
      type: object
    Video:
      properties:
        exerciseId:
          type: string
        url:
          type: string
        videoId:
          type: string
      type: object
    Workout:
      properties:
        caloriesBurned:
          type: integer
        date:
          format: date-time
          type: string
        duration:
          type: integer
        scheduleId:
          type: string
        workoutId:
          type: string
      type: object
    WorkoutSchedule:
      properties:
        date:
          format: date
          type: string
        exerciseId:
          type: string
        scheduleId:
          type: string
        userId:
          type: string
      type: object
info:
  title: FitTrack API
  version: 1.0.0
openapi: 3.0.0
paths:
  /categories:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Category'
                type: array
          description: A list of categories.
        '400': &id001
          content:
            application/problem+json:
              schema:
                properties:
                  detail:
                    type: string
                  status:
                    type: integer
                  title:
                    type: string
                required:
                - status
                - title
                - detail
                type: object
          description: Bad Request
        '500': &id002
          content:
            application/problem+json:
              schema:
                properties:
                  detail:
                    type: string
                  status:
                    type: integer
                  title:
                    type: string
                required:
                - status
                - title
                - detail
                type: object
          description: Internal Server Error
      summary: Returns a list of categories
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Category created successfully.
        '400': *id001
        '500': *id002
      summary: Creates a new category
  /categories/{categoryId}:
    delete:
      parameters:
      - in: path
        name: categoryId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Category deleted successfully.
        '400': *id001
        '500': *id002
      summary: Deletes a category
    get:
      parameters:
      - in: path
        name: categoryId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: A single category.
        '400': *id001
        '500': *id002
      summary: Retrieves a category by ID
    put:
      parameters:
      - in: path
        name: categoryId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Category updated successfully.
        '400': *id001
        '500': *id002
      summary: Updates an existing category
  /exercises:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Exercise'
                type: array
          description: A list of exercises.
        '400': *id001
        '500': *id002
      summary: Returns a list of exercises
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Exercise'
      responses:
        '201':
          description: Exercise created successfully.
        '400': *id001
        '500': *id002
      summary: Creates a new exercise
  /exercises/{exerciseId}:
    delete:
      parameters:
      - in: path
        name: exerciseId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Exercise deleted successfully.
        '400': *id001
        '500': *id002
      summary: Deletes an exercise
    get:
      parameters:
      - in: path
        name: exerciseId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
          description: A single exercise.
        '400': *id001
        '500': *id002
      summary: Retrieves an exercise by ID
    put:
      parameters:
      - in: path
        name: exerciseId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Exercise'
      responses:
        '200':
          description: Exercise updated successfully.
        '400': *id001
        '500': *id002
      summary: Updates an existing exercise
  /foodItems:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FoodItem'
                type: array
          description: A list of food items.
        '400': *id001
        '500': *id002
      summary: Returns a list of food items
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodItem'
      responses:
        '201':
          description: Food item created successfully.
        '400': *id001
        '500': *id002
      summary: Creates a new food item
  /foodItems/{foodItemId}:
    delete:
      parameters:
      - in: path
        name: foodItemId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Food item deleted successfully.
        '400': *id001
        '500': *id002
      summary: Deletes a food item
    get:
      parameters:
      - in: path
        name: foodItemId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodItem'
          description: A single food item.
        '400': *id001
        '500': *id002
      summary: Retrieves a food item by ID
    put:
      parameters:
      - in: path
        name: foodItemId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodItem'
      responses:
        '200':
          description: Food item updated successfully.
        '400': *id001
        '500': *id002
      summary: Updates an existing food item
  /meals:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Meal'
                type: array
          description: A list of meals.
        '400': *id001
        '500': *id002
      summary: Returns a list of meals
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Meal'
      responses:
        '201':
          description: Meal created successfully.
        '400': *id001
        '500': *id002
      summary: Creates a new meal
  /meals/{mealId}:
    delete:
      parameters:
      - in: path
        name: mealId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Meal deleted successfully.
        '400': *id001
        '500': *id002
      summary: Deletes a meal
    get:
      parameters:
      - in: path
        name: mealId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meal'
          description: A single meal.
        '400': *id001
        '500': *id002
      summary: Retrieves a meal by ID
    put:
      parameters:
      - in: path
        name: mealId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Meal'
      responses:
        '200':
          description: Meal updated successfully.
        '400': *id001
        '500': *id002
      summary: Updates an existing meal
  /nutritionPlans:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/NutritionPlan'
                type: array
          description: A list of nutrition plans.
        '400': *id001
        '500': *id002
      summary: Returns a list of nutrition plans
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NutritionPlan'
      responses:
        '201':
          description: Nutrition plan created successfully.
        '400': *id001
        '500': *id002
      summary: Creates a new nutrition plan
  /nutritionPlans/{planId}:
    delete:
      parameters:
      - in: path
        name: planId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Nutrition plan deleted successfully.
        '400': *id001
        '500': *id002
      summary: Deletes a nutrition plan
    get:
      parameters:
      - in: path
        name: planId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NutritionPlan'
          description: A single nutrition plan.
        '400': *id001
        '500': *id002
      summary: Retrieves a nutrition plan by ID
    put:
      parameters:
      - in: path
        name: planId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NutritionPlan'
      responses:
        '200':
          description: Nutrition plan updated successfully.
        '400': *id001
        '500': *id002
      summary: Updates an existing nutrition plan
  /profiles:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Profile'
                type: array
          description: A list of profiles.
        '400': *id001
        '500': *id002
      summary: Returns a list of profiles
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '201':
          description: Profile created successfully.
        '400': *id001
        '500': *id002
      summary: Creates a new profile
  /profiles/{profileId}:
    delete:
      parameters:
      - in: path
        name: profileId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Profile deleted successfully.
        '400': *id001
        '500': *id002
      summary: Deletes a profile
    get:
      parameters:
      - in: path
        name: profileId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: A single profile.
        '400': *id001
        '500': *id002
      summary: Retrieves a profile by ID
    put:
      parameters:
      - in: path
        name: profileId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '200':
          description: Profile updated successfully.
        '400': *id001
        '500': *id002
      summary: Updates an existing profile
  /progressRecords:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProgressRecord'
                type: array
          description: A list of progress records.
        '400': *id001
        '500': *id002
      summary: Returns a list of progress records
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgressRecord'
      responses:
        '201':
          description: Progress record created successfully.
        '400': *id001
        '500': *id002
      summary: Creates a new progress record
  /progressRecords/{recordId}:
    delete:
      parameters:
      - in: path
        name: recordId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Progress record deleted successfully.
        '400': *id001
        '500': *id002
      summary: Deletes a progress record
    get:
      parameters:
      - in: path
        name: recordId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgressRecord'
          description: A single progress record.
        '400': *id001
        '500': *id002
      summary: Retrieves a progress record by ID
    put:
      parameters:
      - in: path
        name: recordId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgressRecord'
      responses:
        '200':
          description: Progress record updated successfully.
        '400': *id001
        '500': *id002
      summary: Updates an existing progress record
  /progressReports:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProgressReport'
                type: array
          description: A list of progress reports.
        '400': *id001
        '500': *id002
      summary: Returns a list of progress reports
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgressReport'
      responses:
        '201':
          description: Progress report created successfully.
        '400': *id001
        '500': *id002
      summary: Creates a new progress report
  /progressReports/{reportId}:
    delete:
      parameters:
      - in: path
        name: reportId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Progress report deleted successfully.
        '400': *id001
        '500': *id002
      summary: Deletes a progress report
    get:
      parameters:
      - in: path
        name: reportId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgressReport'
          description: A single progress report.
        '400': *id001
        '500': *id002
      summary: Retrieves a progress report by ID
    put:
      parameters:
      - in: path
        name: reportId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgressReport'
      responses:
        '200':
          description: Progress report updated successfully.
        '400': *id001
        '500': *id002
      summary: Updates an existing progress report
  /userGroups:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserGroup'
                type: array
          description: A list of user groups.
        '400': *id001
        '500': *id002
      summary: Returns a list of user groups
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroup'
      responses:
        '201':
          description: User group created successfully.
        '400': *id001
        '500': *id002
      summary: Creates a new user group
  /userGroups/{userGroupId}:
    delete:
      parameters:
      - in: path
        name: userGroupId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: User group deleted successfully.
        '400': *id001
        '500': *id002
      summary: Deletes a user group
    get:
      parameters:
      - in: path
        name: userGroupId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
          description: A single user group.
        '400': *id001
        '500': *id002
      summary: Retrieves a user group by ID
    put:
      parameters:
      - in: path
        name: userGroupId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroup'
      responses:
        '200':
          description: User group updated successfully.
        '400': *id001
        '500': *id002
      summary: Updates an existing user group
  /users:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: A list of users.
        '400': *id001
        '500': *id002
      summary: Returns a list of users
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully.
        '400': *id001
        '500': *id002
      summary: Creates a new user
  /users/{userId}:
    delete:
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: User deleted successfully.
        '400': *id001
        '500': *id002
      summary: Deletes a user
    get:
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: A single user.
        '400': *id001
        '500': *id002
      summary: Retrieves a user by ID
    put:
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully.
        '400': *id001
        '500': *id002
      summary: Updates an existing user
  /videos:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Video'
                type: array
          description: A list of videos.
        '400': *id001
        '500': *id002
      summary: Returns a list of videos
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Video'
      responses:
        '201':
          description: Video created successfully.
        '400': *id001
        '500': *id002
      summary: Creates a new video
  /videos/{videoId}:
    delete:
      parameters:
      - in: path
        name: videoId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Video deleted successfully.
        '400': *id001
        '500': *id002
      summary: Deletes a video
    get:
      parameters:
      - in: path
        name: videoId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
          description: A single video.
        '400': *id001
        '500': *id002
      summary: Retrieves a video by ID
    put:
      parameters:
      - in: path
        name: videoId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Video'
      responses:
        '200':
          description: Video updated successfully.
        '400': *id001
        '500': *id002
      summary: Updates an existing video
  /workoutSchedules:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WorkoutSchedule'
                type: array
          description: A list of workout schedules.
        '400': *id001
        '500': *id002
      summary: Returns a list of workout schedules
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkoutSchedule'
      responses:
        '201':
          description: Workout schedule created successfully.
        '400': *id001
        '500': *id002
      summary: Creates a new workout schedule
  /workoutSchedules/{scheduleId}:
    delete:
      parameters:
      - in: path
        name: scheduleId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Workout schedule deleted successfully.
        '400': *id001
        '500': *id002
      summary: Deletes a workout schedule
    get:
      parameters:
      - in: path
        name: scheduleId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutSchedule'
          description: A single workout schedule.
        '400': *id001
        '500': *id002
      summary: Retrieves a workout schedule by ID
    put:
      parameters:
      - in: path
        name: scheduleId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkoutSchedule'
      responses:
        '200':
          description: Workout schedule updated successfully.
        '400': *id001
        '500': *id002
      summary: Updates an existing workout schedule
  /workouts:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Workout'
                type: array
          description: A list of workouts.
        '400': *id001
        '500': *id002
      summary: Returns a list of workouts
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workout'
      responses:
        '201':
          description: Workout created successfully.
        '400': *id001
        '500': *id002
      summary: Creates a new workout
  /workouts/{workoutId}:
    delete:
      parameters:
      - in: path
        name: workoutId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Workout deleted successfully.
        '400': *id001
        '500': *id002
      summary: Deletes a workout
    get:
      parameters:
      - in: path
        name: workoutId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workout'
          description: A single workout.
        '400': *id001
        '500': *id002
      summary: Retrieves a workout by ID
    put:
      parameters:
      - in: path
        name: workoutId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workout'
      responses:
        '200':
          description: Workout updated successfully.
        '400': *id001
        '500': *id002
      summary: Updates an existing workout
